---
import type { MarkdownInstance } from 'astro';
import Layout from '../../layouts/Layout.astro';
import BlogPost from '../../components/BlogPost.astro';
import '../../styles/global.css';

type tagParams = {
  params: { tag: string };
  props: { posts: MarkdownInstance<Record<string, any>>[] };
};

export async function getStaticPaths(): Promise<tagParams[]> {
  const posts = await Astro.glob('../posts/*.md');
  const tags = [...new Set(posts.map((post) => post.frontmatter.tags).flat())];

  return tags.map((tag) => {
    const filteredPosts = posts.filter((post) => post.frontmatter.tags.includes(tag));
    return {
      params: {
        tag,
      },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<Layout title={tag}>
  <p>{tag}のタグが付いた記事</p>
  <ul>
    {posts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title} />)}
  </ul>
</Layout>
